#pragma once
#include "cpp.hpp"

enum InsnFetchState
{
   IDLE,
   WAITING
};

ACTIVE_COMPONENT(InstructionFetcher)
{
   InsnFetchState m_state;
   uint64_t       m_address;

   out_buffer<uint64_t> m_requested_address;
   out_buffer<bool>     m_requested_address_set;
   in_buffer<bool>      m_received_available;
   in_buffer<uint64_t>  m_received_value;

   CTOR InstructionFetcher(Wire<uint64_t> & requested_address, Wire<bool> & requested_address_set, Wire<bool> & received_available, Wire<uint64_t> & received_value)
       : m_requested_address(requested_address)
       , m_requested_address_set(requested_address_set)
       , m_received_available(received_available)
       , m_received_value(received_value)
   {
      m_state = InsnFetchState::IDLE;
   }

   void tick()
   {
      switch (m_state)
         {
            case InsnFetchState::IDLE: {
               m_requested_address.push(m_address);
               m_requested_address_set.push(true);
               m_state = InsnFetchState::WAITING;
               break;
            }
         }

      uint32_t raw_insn = 0;
   }
};